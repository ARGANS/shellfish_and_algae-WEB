proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;



upstream api_upstream {
	server ac-dashboard:80;
}

upstream node_upstream {
	server ${NODE_HOST};
}

server {
	listen       80 default_server;
	listen       [::]:80 default_server;
	server_name localhost 127.0.0.1;
	# TODO fix port number for dev
	# return       301 https://$host:4443$request_uri;
	return       301 https://$host:443$request_uri;
}

server {
	listen       443 ssl http2 default_server;
	listen       [::]:443 ssl http2 default_server;
	server_name localhost 127.0.0.1;
	root         /usr/share/nginx/html;

	ssl_certificate "/etc/nginx/conf.d/certs/public.crt";
	ssl_certificate_key "/etc/nginx/conf.d/certs/private.key";
	ssl_session_cache shared:SSL:1m;
	ssl_session_timeout  10m;
	## Causes `SSL_CTX_set_cipher_list("PROFILE=SYSTEM") failed`
	## ssl_ciphers PROFILE=SYSTEM;
	ssl_prefer_server_ciphers on;

	gzip on;
	gzip_types text/css application/javascript application/json image/svg+xml;
	gzip_comp_level 9;
	etag on;
	# This hides the specific version of NGINX from the Server header and error pages:
	server_tokens off;


	location /dshbrd_static {
		proxy_pass http://api_upstream;
		proxy_redirect off;
		proxy_hide_header X-Powered-By;
	}
	location /api/v1/ {
		proxy_pass http://api_upstream;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Host $server_name;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $http_host;
		proxy_http_version 1.1;
	}

	location /api/v2/ {
		rewrite /api/v2/(.*) /$1  break;
		auth_request /auth;
		proxy_pass http://node_upstream;
		proxy_redirect off;
		proxy_hide_header X-Powered-By;
	}

	location /auth {
		internal;
		proxy_pass http://api_upstream/api/v1/auth/status;
		proxy_pass_request_body off; # no need of the body
		proxy_set_header Content-Length "";
		proxy_set_header X-Original-URI $request_uri; # we will use the info to do more validation
    }
	
	location /service {
		# Protecting the service page from unauthorized access
		auth_request /auth;
		try_files $uri $uri.html $uri/ =403;
	}

	location / {
		try_files $uri $uri.html $uri/ =404;
	}

	error_page 403 = @403;
	location @403 {
		# TODO use another login page 
		# + ? url=$scheme://$http_host$request_uri
		# return 301 $scheme://$http_host/api/v1/;
		return 301 $scheme://$http_host/api/v1/?url=$request_uri;
	}


	error_page 404 = @404;
    location @404 {
        return 404 "__Not Found__\n";
    }


    location = /test {
		# $server_port:443 $scheme:https $http_host:localhost:4443 $host:localhost
        add_header Content-Type text/html;
        return 200 "port:$server_port schema:$scheme httphost:$http_host host:$host http_upgrade:$http_upgrade";
	}

	location /private {
		auth_request /auth;
	  	add_header Content-Type text/html;
	  	return 200 "private page";
	}
    
			
	# TODO
	# error_page   500 502 503 504  /50x.html;

    # location = /50x.html {
    #     root   /usr/share/nginx/html;
    # }


}
